<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
		<!-- 阿里 druid 数据库连接池配置文件，
		这里有个坑爹的bug,mybatis的自动注入sqlSessionFactory加载过早会导致PropertyPlaceholderConfigurer加载properties解析失败 -->
	<bean id = "propertyConfigurer" class = "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >  
		<property name = "locations">  
			<list>
				<value>classpath:jdbc.properties</value>
			</list>  
		</property>  
	</bean>
	<!-- 阿里 druid 数据库连接池 -->
	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method = "close" >  
		<!-- 数据库基本信息配置 -->
		<property name = "url" value = "${url}" />  
		<property name = "username" value = "${username}" />  
		<property name = "password" value = "${password}" />  
		<property name = "driverClassName" value = "${driverClassName}" />  
		<property name = "filters" value = "${filters}" />  
		<!-- 最大并发连接数 -->
		<property name = "maxActive" value = "${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name = "initialSize" value = "${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name = "maxWait" value = "${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name = "minIdle" value = "${minIdle}" />  
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "timeBetweenEvictionRunsMillis" value = "${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value = "${minEvictableIdleTimeMillis}" />  
		<property name = "validationQuery" value = "${validationQuery}" />  
		<property name = "testWhileIdle" value = "${testWhileIdle}" />  
		<property name = "testOnBorrow" value = "${testOnBorrow}" />  
		<property name = "testOnReturn" value = "${testOnReturn}" />  
		<property name = "maxOpenPreparedStatements" value = "${maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandoned" value = "${removeAbandoned}" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name = "removeAbandonedTimeout" value = "${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->   
		<property name = "logAbandoned" value = "${logAbandoned}" />
	</bean>
	<!-- 配置事务管理器 --> 
	<bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">   
		<property name = "dataSource" ref = "dataSource" />
	</bean>
	<!-- 事务控制 --> 
	<tx:advice id="txAdvice"  transaction-manager="transactionManager" >
        <tx:attributes>
        	<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="new*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="servicesPointcut" expression="execution(* com.lmt..*.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicesPointcut" />
    </aop:config>
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
</beans>